https://www.youtube.com/watch?v=iCQspqBpOB0

MVC : Model View Controller

Typical servlet : HTML code embedded into Java code, Typical JSP : Java code embedded into HTML code

M odel : data
V iew : data
C ontroller : manages application flow, makes a call to a some sort of service producing model and then passes on the model to the view.

Controller -> (Passes Model) -> to View

Inversion of Control or Dependency injection

Browser (request) -> Front controller -> Handler Mapping (Scan the URL; tells the exact address of the component which can generate data for the web request requested for -> Front
Controller -> Data generator (prepares data, creates Java object to hold the data - may take help of other Java classes if it is required to do the job) (Java Object which holding data + 
Name of the component which is going to retrieve data from the Java Object + mixing with HTML to generate actual response -> Front Handler -> View resolver (tells the address of the view maker)
-> Front Controller (Java Object) -> Final response builder (creates final response with HTML and Java Objects) -> Browser

Client -> Dispatcher Servlet -> Handler Mapping -> Dispatcher Servlet -> Controller -> Dispatcher Servlet -> View resolver -> Dispatcher Servlet -> JSP/ Velocity/ Freemaker -> Dispatcher Servlet
-> Client

Java object with data : model

/ : Dispatcher Servlet : Front handler
Handler mapping resolves the url to actual class which can serve client

There are many HandlerMapping classes

Class not found exception for DispatcherServlet:
	need to add the "Maven Dependency" in the Deployment Assembly
	    right click on project and choose properties.
	    click on Deployment Assembly.
	    click add
	    click on "Java Build Path Entries"
	    select Maven Dependencies"
	    click Finish.
		Rebuild and deploy again
		
Annotation:
no need to extend
no need to specify in dispatcher servlet
If need to use annotation, need to add that package or class for component scan

front controller reads spring-dispatcher-servlet to process further. When "context:component-scan" is used, it will load all the classes in the base package.
@RequestMapping is used to detect the method to execute for a url. matching url against RequestMapping values

Methods to serve request : request handler methods
Controller class having more than one request handler methods : Multi action controller class

Type http://localhost:8090/FirstSpringMVCProject/wrfer
No resources are available to process this URL

Relative url can be achieved by having @RequestMapping annotation in class level

ABCD as mobile : auto binding fails because can't convert ABCD to long
Handle: resend the form with BindingResult

Need to bind except one value: @InitBinder and WebDataBinder

By default date format : yyyy/mm/dd: to change it to yyyy****mm****dd - need to change property editors : CustomDateEditor with registerCustomEditor
Other examples for Property editors : FileEditor, ClassEditor, CustomMemberEditor
SpringMVC uses property editor classes in order to perform type conversion while performing data binding.
Customize data binding for a type: by editing property editor for that type

Custom property editor classes can be written other than built-in property editor classes
Specific requirement: need to write custom property class:
Eg: Mr/Miss/Mrs in the name of student is needed and default value is Miss

Form validation eg:
2 < Hobby char count < 30 : By @Size annotation
need to activate form validation by @Valid annotation

to use form validation, need to use a third party implementation for JSR 303, JSR 349 : Eg: Hibernate validator library, Apache bean validator library

JSR (Java Specification Request) standard by JCP (Java Community Process)

******************************************************************************************************************************************

javax.servlet.ServletException: Error instantiating servlet class org.springframework.web.servlet.DispatcherServlet
	org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:620)
	org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:502)
	org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1132)
	org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:684)
	org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1539)
	org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1495)
	java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	java.lang.Thread.run(Unknown Source)


root cause
java.lang.ClassNotFoundException: org.springframework.web.servlet.DispatcherServlet
	org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1352)
	org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1180)
	org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)
	org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:620)
	org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:502)
	org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1132)
	org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:684)
	org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1539)
	org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1495)
	java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	java.lang.Thread.run(Unknown Source)

-----------------------------------------------------------------------------------------------------------------------------------------------
Solution: Project right click -> properties -> Deployment Assembly -> Add -> Java Build Path Entries -> Next -> Maven Dependencies -> Finish
-> Apply -> OK
************************************************************************************************************************************************
Key for message for a validation: [Validation annotation name].[Object reference name].[Field name]
If not found that key it will search for : [Validation annotation name].[Field name]
If not found that key it will search for : [Validation annotation name].[Field type] [Eg: (Size.java.lang.String)]
If not found that key it will search for : Size (default message by spring framework)

************************************************************************************************************************************************
place holder for validation messages from property files:
{0} : name of the field
{1}, {2}, ... : arguments passed to the annotation
Spring MVC uses argument order alphabetically:
==> max - {1}, min - {2}

<property name="cacheSeconds" value="1" /> : Tell Spring mvc to load changes in property files for every second of runtime: not to recommend in production: only in Development
unnecessary performance issue

************************************************************************************************************************************************
User name should not contain numeric values: By @Pattern (regular expression)
Date of birth should not be in future : By @Past
Mobile no <= 2222 : By @Max

@Future
@Min
@NotNull
@NotEmpty : not supported by bean validation spec: only in Hibernate validator

StudentHobby should be valid : One of the following: Music, Football, Cricket, Hockey : Custom form validation annotation is needed

Application should work on all weekdays except Sunday: By interceptor

---------------------------------------------------------------------------------------------------------

make interceptor to work only for a particular url

<mvc:interceptors>
	<bean class="com.jeya.springmvc.springspeccustom.DayOfWeekBasedAccessInterceptor" />
</mvc:interceptors>

needed to be modified as

<mvc:interceptors>
	<mvc:interceptor>
		<mvc:mapping path="/admissionForm.html" />
		<bean class="com.jeya.springmvc.springspeccustom.DayOfWeekBasedAccessInterceptor" />
	</mvc:interceptor>
</mvc:interceptors>

---------------------------------------------------------------------------------------------------------
Localization:

1. replace hardwired label in English with a new language

---------------------------------------------------------------------------------------------------------

Interceptor in theme:
When click on red link => /FirstSpringMVCProject/admissionForm.html?siteTheme=red is passed to the server.
ThemeChangeInterceptor get that link and extract the value for siteTheme.
themeSource tells the base name and loads the files with the base name theme-. 
Theme resolver resolves the file name for the required link
<link rel="stylesheet" href="<spring:theme code='styleSheet'/>" type="text/css" /> tells to
look at the stylesheet to resolve the placeholder
<mvc:resources mapping="/cssresources/**" location="/WEB-INF/css/" /> tells
/cssresources/ should be extracted as /WEB-INF/css/
==> found the file and resolve by viewResolver
cookieThemeResolver works just like cookieLocaleResolver
----------------------------------------------------------------------------------------------------------

Interceptor in localization:
When click on fr link => /FirstSpringMVCProject/admissionForm.html?siteLanguage=fr is passed to the server.
LocaleChangeInterceptor get that link and extract the value for siteLanguage.
messageSource tells the base name. localeResolver resolves the file name for the required link

---------------------------------------------------------------------------------------------------------
http://localhost:8090/FirstSpringMVCProject/greet/welcomeWithError is used to demonstrate exception handling

when there is a null pointer exception is thrown, Spring will look for a method annotated with @ExceptionHandler 
and value of NullPointerException in the same class. It will take the returning string as name of the jsp and
display it

handle exception in each and every controller class is painful. ==> @ControllerAdvice class
to test that use: http://localhost:8090/FirstSpringMVCProject/admissionError
important: class annotated with @ControllerAdvice should be in <context:component-scan base-package="com.jeya.springmvc.controller" />
package

If we are going to have a simple webpage with an error message for exception handling like GlobalExceptionHandlerMethods class.
We don't need to write separate class for that. instead having following in dispatcher-servlet is enough.

<bean id="simpleMappingExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<map>
				<entry key="NullPointerException" value="ViewNullPointerException"/>
				<entry key="IOException" value="ViewIOException"/>
			</map>	
		</property>
		
		<!-- This is the default error webpage or the generic error webpage -->
		<property name="defaultErrorView" value="ViewException"/>
		
		<!-- Name of logger to use to log exceptions. Unset by default, so logging disabled -->
		<property name="warnLogCategory" value="MVCLogger"/>
	</bean>
	
-----------------------------------------------------------------------------------------------------------------------
Check http header:
install a plugin for browser to do that

status code 200: server has processed the request successfully
404 : requested resource not available
500 : internal server error
503 : server is currently unavailable (overloaded or down for maintenance)

in exception handling : error with 200 status code : wrong
can change status code by annotated error handling method with
@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)

------------------------------------------------------------------------------------------------------------------------

Web service application (service provider) lets other applications (client application) to make call to its methods

-language may same or differ
-client and server need not be in same machine
-client and server in same network (LAN/WAN/Internet)

Web service can be either SOAP or REST: based on which guideline it follows:

SOAP:

Client needs to know some basic information about server: without that information, it can't communicate with server
- exact location/address of service provider.
- exact signature of all exposed methods of service provider..

client get such information using a XML file provided by server (WSDL : Web Service Description Language)
Communication between client and service provider : by SOAP protocol ==> SOAP based web application and SOAP based client

mostly they use http while sending messages between them. SMTP, FTP, JMS etc also possible as per requirement

REST:

-REST - Representation State Transfer
- Data and functionality kept in server, client can access or modify : resource
- access or modify using its uri
- response : a representation of resource + additional information (basic characteristic of resource representation it returned : format, size)
(valid formats for copy of requested resource representation : xml, json, html, csv, pdf)
Client uses additional information to know the type of resource and processed response based on the type of resource
: using response, client should be able to do CRUD on resources according to the permission it has

any number of intermediaries is allowed: response caching, server security, load balancing between client and server
Eg: firewall server with server(client request passed through firewall server to stop insecure and malicious request)
caching server with client(save response from server before it reaches the client so that client doesn't need to ask for server again for the same resource.)

At any point client should not be able to tell whether it is connected directly to the server or to any intermediary placed in between : transparent

every request by client is treated as new request ==> need to send all the information for server every time
server is needed to insert a unique uri for a new resource sent by client so that when user

Code on demand : one of REST guideline : Client system can be developed in advanced way such that it is capable of downloading and executing code in the form of Applets or
Scripts. (Eg: the way Java Applet or Java Script runs in a browser Client (optional guideline: even if it is not allowed it is ok and still the system is said be a REST based
system if it follows all other REST guidelines))

When there is a caching server is installed: server should explicitly tell in the response whether that response is cacheable or not ==> caching server will cache
only those responses which Server wants to..)

REST is best realized using HTTP protocol (protocols other than http can be used to realize REST: but REST is the BEST)

http://localhost/FirstSpringMVCProject/students

@RequestMapping(value="/students", method = RequestMethod.GET) will direct the call from http://localhost/FirstSpringMVCProject/students uri to this method.
Convert java object to JSON format : added dependency, made changes in dispatcher servlet and annotated with @ResponseBody.

Normal case:
Every controller method which handles the HTTP request which are made by the clients is supposed to specify the view name which spring framework later uses to prepare response
which is sent to the client as the response.

Rest API case:
no need for view. we don't want spring framework to make use of any view to prepare the final response. Instead we want to send return value of this method to the client by simply
performing the conversion from Java object to JSON format. for the conversion, need to specify @ResponseBody annotation.
(Don't look for any view technology to prepare response. Instead, convert the return value to desired format and return to the client)
(Java object to equivalent JSON text format : need dependencies for that)

@JsonProperty("student_name")private String studentName; // studentName attribute will be shown as student_name in JSON response

@JsonPropertyOrder is used to specify the order of the keys in JSON string

@JsonIgnoreProperties is used to ignore properties available in JSON string

key with null value should not be returned with JSON string : @JsonInclude(JsonInclude.Include.NON_NULL)

------------------------------------------------------------------------------------------------------------------------
@RequestMapping(value="/students/{name}", method = RequestMethod.GET)
public Student getStudent(@PathVariable("name") String studentName)
		{name} is assigned to studentName by the annotation PathVariable

whatever value specified after PathVariable annotation is extracted from REST request for a Request made by client and assigned to the variable created after PathVariable annotation.

------------------------------------------------------------------------------------------------------------------------
Separate REST APIs in a dedicated class for readability: by @RESTContriller
If @RestController is annotated all the APIs in the class are REST. In that case, no need to add @ResponseBody annotation in each and every APIs.
If @Controller is used need to specify @ResponseBody